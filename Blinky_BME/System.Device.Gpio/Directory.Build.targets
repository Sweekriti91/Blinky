<Project>
  <!-- Targets for building the notsupported assembly -->
  <Target Name="SetupEnvironmentForNotSupportedAssembly">
    <PropertyGroup>
      <OutDir>$(OutDir)notsupported\</OutDir>
      <ProjectDepsFilePath>$(OutDir)$(ProjectDepsFileName)</ProjectDepsFilePath>
    </PropertyGroup>
    <ItemGroup>
      <Compile Remove="@(Compile)" />
      <CreateDirectory Include="$(OutputPath)notsupported\" />
    </ItemGroup>
  </Target>

  <Target Name="ResolveMatchingContract">
    <ItemGroup>
      <ResolvedMatchingContract Include="$(OutputPath)ref\$(MSBuildProjectName).dll" />
    </ItemGroup>
  </Target>

  <Target Name="BuildNotSupportedAssembly"
          Condition="'$(RuntimeIdentifier)' == ''"
          AfterTargets="Build"
          DependsOnTargets="SetupEnvironmentForNotSupportedAssembly;$(BuildDependsOn)" />

  <!-- Remove all the default content to be includded in the package as we have custom logic that handles that. -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);RemoveBuildOutputBeforePackaging</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <Target Name="RemoveBuildOutputBeforePackaging" DependsOnTargets="BuiltProjectOutputGroup">
    <ItemGroup>
      <BuiltProjectOutputGroupOutput Remove="@(BuiltProjectOutputGroupOutput)" />
      <DocumentationProjectOutputGroupOutput Remove="@(DocumentationProjectOutputGroupOutput)" />
    </ItemGroup>
  </Target>

  <!-- Set the path to the symbols that will go into the snupkg -->
  <PropertyGroup>
    <DebugSymbolsProjectOutputGroupDependsOn>$(DebugSymbolsProjectOutputGroupDependsOn);GetSymbolsForSnupkg</DebugSymbolsProjectOutputGroupDependsOn>
  </PropertyGroup>

  <Target Name="GetSymbolsForSnupkg" Condition="'$(DebugType)' == 'Portable'">
    <!-- Add the linux and windows specific pdbs -->
    <ItemGroup>
      <!-- DebugSymbolsProjectOutputGroupOutput doesn't support PackagePath and instead the output path is set to lib/$(TargetFramework)/$(TargetPath) 
           Setting TargetPath to ./../../ will get us back to the root of the package, so now we are able to place the pdbs inside
           the runtimes folder.
      -->
      <DebugSymbolsProjectOutputGroupOutput Include="$(OutputPath)linux/$(AssemblyName).pdb">
        <TargetPath>./../../runtimes/linux/lib/$(TargetFramework)/$(AssemblyName).pdb</TargetPath>
        <TargetFramework>$(TargetFramework)</TargetFramework>
      </DebugSymbolsProjectOutputGroupOutput>
      <DebugSymbolsProjectOutputGroupOutput Include="$(OutputPath)win/$(AssemblyName).pdb">
        <TargetPath>./../../runtimes/win/lib/$(TargetFramework)/$(AssemblyName).pdb</TargetPath>
        <TargetFramework>$(TargetFramework)</TargetFramework>
      </DebugSymbolsProjectOutputGroupOutput>
    </ItemGroup>
  </Target>

  <Import Project="..\..\Directory.Build.targets" />
</Project>
